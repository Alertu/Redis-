Redis数据结构
字符串，hash（字典），zset（有序集合），set（集合），pub/sub（主题订阅者模式），list（列表）
Redis分布式锁
先用setnx争抢锁，抢到之后给锁加一个过期时间（exprie）以免忘记释放，set可以和exprie结合使用
Redis中有1亿个KEY,其中有5000W个key是以相同格式前缀开头，怎么取出来？
使用KEYS，缺点是：Redis是单线程的，如果使用KEYS会使线上服务器宕机一段时间，直到指令结束才会恢复，优点：速度快，没有重复数据；
scan指令可以没有堵塞的取出，但是会有重复的数据，需要一次去重操作，速度会比keys慢
Redis异步队列
一般使用list做队列，rpush生产消息，lpop消费消息，当lpop没有消息的时候，需要适当的sleep一会在重试
如果实现1：N 使用 pub/sub（主题订阅者模式），缺点：当消费者下线生产的消息会丢失，需要使用专门的消息队列（rabbitmp）等
Redis延迟队列
使用sortedset（有序集合）那时间戳作为sort消息内容作为key调用zdd生产消息，消费者通过zrandebyscore指令获取N秒之前的数据进行轮询处理
如果有大量的key需要设置同一时间过期需要注意什么
如何设置的时间过于统一，可能到这个时间Redis会出现卡顿，一般需要在时间上面加上一个随机值，使过期时间分散一些
Redis如何做持久化
快照，AOF（Redis所有的操作指令，运行AOF指令时把这些指令在重新执行一遍）
bgsave做镜像全量持久化
AOF做增量全量持久化
bgsave比较耗费时间，不够实时，在关机后会造成大量数据丢失，需要AOF配合使用
Redis重启时，需要使用bgsave持久化文件重新构建内存，在使用AOF重放近期操作指令
如果突然断电会怎么样？
取决于AOF日志sync属性配置，如果不要求性能每条写指令时都sync一下磁盘就不会丢失数据，但是高性能要求下每次都使用sync不现实，一般定时sync比如1S一次
这样最多久丢失1S的数据
bgsave的原理？
fork和cow
fork是Redis创建子进程来进行bgsave操作，cow是指 copy on write 子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离
Redis同步机制
Redis可以进行主从同步，从从同步，第一次同步时，主节点需要做一次bgsave，并同时将修改的记录，记录到buffer（缓冲）中，完成之后rdb文件会全量同步到复制节点
复制节点接受完成之后将rdb镜像加载到内存，加载完成之后，在通知主节点将期间的的操作记录同步到复制节点进行重放就完成同步的过程
